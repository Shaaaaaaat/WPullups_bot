require("dotenv").config();
const { Bot, InlineKeyboard, Keyboard, session } = require("grammy");
const express = require("express");
const bodyParser = require("body-parser");
const crypto = require("crypto");
const stripe = require("stripe")(process.env.STRIPE_KEY); // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
const fs = require("fs");
const axios = require("axios");
const connectDB = require("./database");
const Session = require("./sessionModel");

// –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
console.log("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ");

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new Bot(process.env.BOT_API_KEY); // –í–∞—à API –∫–ª—é—á –æ—Ç Telegram –±–æ—Ç–∞

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
connectDB();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ JSON-—Ñ–∞–π–ª–∞
const loadMessages = () => {
  return JSON.parse(fs.readFileSync("messages.json", "utf8"));
};
const messages = loadMessages();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
function generateUniqueId() {
  const maxId = 2147483647; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  const minId = 1; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  return (Date.now() % (maxId - minId + 1)) + minId;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
function generatePaymentLink(paymentId, sum, email) {
  const shopId = process.env.ROBO_ID; // –õ–æ–≥–∏–Ω –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –≤ –†–æ–±–æ–∫–∞—Å—Å–µ
  const secretKey1 = process.env.ROBO_SECRET1; // Secret Key 1 –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏

  const signature = crypto
    .createHash("md5")
    .update(`${shopId}:${sum}:${paymentId}:${secretKey1}`)
    .digest("hex");

  return `https://auth.robokassa.ru/Merchant/Index.aspx?MerchantLogin=${shopId}&OutSum=${sum}&InvId=${paymentId}&SignatureValue=${signature}&Email=${encodeURIComponent(
    email
  )}&IsTest=0`; // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ https://auth.robokassa.ru/ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ Price
async function createStripePriceAMD(amount, currency, productName) {
  const price = await stripe.prices.create({
    unit_amount: amount * 100, // 100 –µ–≤—Ä–æ –≤ —Ü–µ–Ω—Ç–∞—Ö
    currency: currency.toLowerCase(),
    product_data: {
      name: productName,
    },
  });
  return price.id;
}

async function generatePaymentLinkFirst(studio, email) {
  const studioInfo = studioDetails[studio];

  if (!studioInfo) {
    throw new Error("–°—Ç—É–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
  }

  const paymentId = generateUniqueId(); // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
  const sum = studioInfo.price;
  const currency = studioInfo.currency;
  const e = email;

  if (studioInfo.paymentSystem === "robokassa") {
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è Robokassa
    const paymentLink = generatePaymentLink(paymentId, sum, e);
    return { paymentLink, paymentId };
  } else if (studioInfo.paymentSystem === "stripeAMD") {
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è Stripe
    const priceId = await createStripePriceAMD(
      studioInfo.price,
      currency,
      studio
    );
    const paymentLink = await createStripePaymentLink(priceId, paymentId);
    return { paymentLink, paymentId };
  } else {
    throw new Error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–ª–∞—Ç—ë–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞");
  }
}

async function generateSecondPaymentLink(buy, email) {
  const actionInfo = actionData[buy];

  if (!actionInfo) {
    throw new Error("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
  }

  const paymentId = generateUniqueId(); // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
  const sum = actionInfo.sum;
  const currency = actionInfo.currency;
  const studio = actionInfo.studio;
  const e = email;

  if (actionInfo.paymentSystem === "robokassa") {
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è Robokassa
    const paymentLink = generatePaymentLink(paymentId, sum, e);
    return { paymentLink, paymentId };
  } else if (actionInfo.paymentSystem === "stripeAMD") {
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è Stripe
    const priceId = await createStripePriceAMD(
      actionInfo.sum,
      currency,
      studio
    );
    const paymentLink = await createStripePaymentLink(priceId, paymentId);
    return { paymentLink, paymentId };
  } else if (actionInfo.paymentSystem === "stripeEUR") {
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è Stripe
    const priceId = await createStripePriceEUR(
      actionInfo.sum,
      currency,
      studio
    );
    const paymentLink = await createStripePaymentLink(priceId, paymentId);
    return { paymentLink, paymentId };
  } else {
    throw new Error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–ª–∞—Ç—ë–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞");
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–Ω—ã –≤ Stripe
async function createStripePriceEUR(amount, currency, productName) {
  const price = await stripe.prices.create({
    unit_amount: amount * 100, // Stripe –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—É–º–º—É –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö (—Ü–µ–Ω—Ç–∞—Ö)
    currency: currency.toLowerCase(),
    product_data: {
      name: productName,
    },
  });
  return price.id;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ Stripe
async function createStripePaymentLink(priceId, paymentId) {
  const paymentLink = await stripe.paymentLinks.create({
    line_items: [
      {
        price: priceId,
        quantity: 1,
      },
    ],
    metadata: {
      paymentId: paymentId, // –ü–µ—Ä–µ–¥–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞
    },
  });
  return paymentLink.url;
}

const actionData = {
  buy_6900_ds_rub: {
    sum: 6900,
    lessons: 1,
    tag: "pullups_for_ladies_rub",
    currency: "RUB",
    paymentSystem: "robokassa",
  },
  buy_69_ds_eur: {
    sum: 69,
    lessons: 1,
    tag: "pullups_for_ladies_eur",
    currency: "EUR",
    paymentSystem: "stripeEUR",
    studio: "pullups_for_ladies",
  },
};

// –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–Ω–æ–ø–æ–∫
const buttonsData = {
  ds: {
    RUB: [
      {
        text: "1 –∑–∞–Ω—è—Ç–∏–µ (1 100‚ÇΩ) ‚Äî –¥–µ–π—Å—Ç–≤—É–µ—Ç 4 –Ω–µ–¥–µ–ª–∏",
        callback_data: "buy_1100_ds_rub",
      },
      {
        text: "12 –∑–∞–Ω—è—Ç–∏–π (9 600‚ÇΩ) ‚Äî –¥–µ–π—Å—Ç–≤—É–µ—Ç 6 –Ω–µ–¥–µ–ª—å",
        callback_data: "buy_9600_ds_rub",
      },
      {
        text: "36 –∑–∞–Ω—è—Ç–∏–π (23 400‚ÇΩ) ‚Äî –¥–µ–π—Å—Ç–≤—É–µ—Ç 14 –Ω–µ–¥–µ–ª—å",
        callback_data: "buy_23400_ds_rub",
      },
    ],
    EUR: [
      {
        text: "12 –∑–∞–Ω—è—Ç–∏–π (105‚Ç¨) ‚Äî –¥–µ–π—Å—Ç–≤—É–µ—Ç 6 –Ω–µ–¥–µ–ª—å",
        callback_data: "buy_105_ds_eur",
      },
      {
        text: "36 –∑–∞–Ω—è—Ç–∏–π (249‚Ç¨) ‚Äî –¥–µ–π—Å—Ç–≤—É–µ—Ç 14 –Ω–µ–¥–µ–ª—å",
        callback_data: "buy_249_ds_eur",
      },
    ],
  },
};

const studioDetails = {
  handstand_ru: {
    price: 5400,
    currency: "RUB",
    tag: "handstand",
    paymentSystem: "robokassa",
  },
  handstand_eur: {
    price: 54,
    currency: "EUR",
    tag: "handstand",
    paymentSystem: "stripeEUR",
  },
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—É–¥–∏–∏
function getPriceAndSchedule(studio) {
  const priceSchedule = {
    super_calisthenics:
      "–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å–∞ ¬´SuperCalisthenics¬ª:\nüëâüèª 12 –∑–∞–Ω—è—Ç–∏–π (–¥–æ—Å—Ç—É–ø 6 –Ω–µ–¥–µ–ª—å):\n9600‚ÇΩ | 105‚Ç¨\nüëâüèª 36 –∑–∞–Ω—è—Ç–∏–π (–¥–æ—Å—Ç—É–ø 14 –Ω–µ–¥–µ–ª—å):\n23400‚ÇΩ | 249‚Ç¨\nüëâüèª –ü—Ä–æ–±–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (—Ç–µ—Å—Ç-—Å–∏–ª—ã)\n950‚ÇΩ | 10‚Ç¨",
    handstand:
      "–ö—É—Ä—Å ¬´C–Ω–æ–≥—à–∏–±–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–π–∫–∞ –Ω–∞ —Ä—É–∫–∞—Ö¬ª\nüëâüèª –° —Ç—Ä–µ–Ω–µ—Ä–æ–º: 5400‚ÇΩ | 59‚Ç¨ \nüëâüèª –¢–æ–ª—å–∫–æ –≤–∏–¥–µ–æ-—É—Ä–æ–∫–∏: 2700‚ÇΩ | 29‚Ç¨",
  };

  return (
    priceSchedule[studio] || "–¶–µ–Ω–∞ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã."
  );
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Airtable
async function getUserInfo(tgId) {
  const apiKey = process.env.AIRTABLE_API_KEY;
  const baseId = process.env.AIRTABLE_BASE_ID;
  const clientsId = process.env.AIRTABLE_CLIENTS_ID;

  const url = `https://api.airtable.com/v0/${baseId}/${clientsId}?filterByFormula={tgId}='${tgId}'`;
  const headers = {
    Authorization: `Bearer ${apiKey}`,
  };

  try {
    const response = await axios.get(url, { headers });
    const records = response.data.records;

    if (records.length > 0) {
      const email = records[0].fields.email || "–Ω–µ—Ç email"; // –ï—Å–ª–∏ email –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const tag = records[0].fields.Tag || "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"; // –ï—Å–ª–∏ —Ç–µ–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤—ã–≤–æ–¥–∏–º "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
      const balance =
        records[0].fields.Balance !== undefined
          ? records[0].fields.Balance
          : "0";
      const currency = records[0].fields.Currency || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"; // –ï—Å–ª–∏ –≤–∞–ª—é—Ç—ã –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
      return { email, tag, balance, currency };
    } else {
      return null; // –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
    }
  } catch (error) {
    console.error(
      "Error fetching user info from Airtable:",
      error.response ? error.response.data : error.message
    );
    return null; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function generateKeyboard(tag) {
  let keyboard = new InlineKeyboard();
  console.log("–û—Ç–ø—Ä–∞–≤–ª—è—é –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã");

  if (tag === "ds_rub") {
    buttonsData.ds.RUB.forEach((button) => keyboard.add(button).row());
  } else if (tag === "ds_eur") {
    buttonsData.ds.EUR.forEach((button) => keyboard.add(button).row());
  } else {
    // –ï—Å–ª–∏ —Ç–µ–≥ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
    return null;
  }
  return keyboard;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –≤–µ–±—Ö—É–∫
async function sendToWebhook(studio, telegramId) {
  const webhookUrl =
    "https://hook.eu1.make.com/dg644dcxuiuxrj57lugpl4dkuwv4pyvw"; // –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à URL –≤–µ–±—Ö—É–∫–∞

  // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
  const data = [
    {
      messenger: "telegram",
      variables: [
        {
          name: "studio",
          type: "text",
          value: studio, // –ü–µ—Ä–µ–¥–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—É–¥–∏—é
        },
      ],
      telegram_id: telegramId, // –ü–µ—Ä–µ–¥–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    },
  ];

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ–±—Ö—É–∫ Make.com
    await axios.post(webhookUrl, data);
    console.log("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–µ–±—Ö—É–∫");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –≤–µ–±—Ö—É–∫:", error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Airtable
async function sendFirstAirtable(tgId, name, nickname) {
  const apiKey = process.env.AIRTABLE_API_KEY;
  const baseId = process.env.AIRTABLE_BASE_ID;
  const idId = process.env.AIRTABLE_IDS_ID;

  const url = `https://api.airtable.com/v0/${baseId}/${idId}`;
  const headers = {
    Authorization: `Bearer ${apiKey}`,
    "Content-Type": "application/json",
  };

  const data = {
    fields: {
      tgId: tgId,
      FIO: name,
      Nickname: nickname,
    },
  };

  try {
    const response = await axios.post(url, data, { headers });
    return response.data.id; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏
    // await axios.post(url, data, { headers });
  } catch (error) {
    console.error(
      "Error sending data to Airtable:",
      error.response ? error.response.data : error.message
    );
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ Airtable
async function updateAirtableRecord(id, city, studio) {
  const apiKey = process.env.AIRTABLE_API_KEY;
  const baseId = process.env.AIRTABLE_BASE_ID;
  const tableId = process.env.AIRTABLE_IDS_ID;

  const url = `https://api.airtable.com/v0/${baseId}/${tableId}/${id}`;
  const headers = {
    Authorization: `Bearer ${apiKey}`,
    "Content-Type": "application/json",
  };

  const data = {
    fields: {
      City: city,
      Studio: studio,
    },
  };

  try {
    await axios.patch(url, data, { headers }); // –ò—Å–ø–æ–ª—å–∑—É–µ–º PATCH –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  } catch (error) {
    console.error(
      "Error updating data in Airtable:",
      error.response ? error.response.data : error.message
    );
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Airtable
async function sendToAirtable(name, email, phone, tgId, city, studio) {
  const apiKey = process.env.AIRTABLE_API_KEY;
  const baseId = process.env.AIRTABLE_BASE_ID;
  const tableId = process.env.AIRTABLE_LEADS_ID;

  const url = `https://api.airtable.com/v0/${baseId}/${tableId}`;
  const headers = {
    Authorization: `Bearer ${apiKey}`,
    "Content-Type": "application/json",
  };

  const data = {
    fields: {
      FIO: name,
      email: email,
      Phone: phone,
      tgId: tgId,
      City: city,
      Studio: studio,
    },
  };

  try {
    await axios.post(url, data, { headers });
  } catch (error) {
    console.error(
      "Error sending data to Airtable:",
      error.response ? error.response.data : error.message
    );
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Airtable 2
async function sendTwoToAirtable(tgId, invId, sum, lessons, tag, date, nick) {
  const apiKey = process.env.AIRTABLE_API_KEY;
  const baseId = process.env.AIRTABLE_BASE_ID;
  const buyId = process.env.AIRTABLE_BUY_ID;

  const url = `https://api.airtable.com/v0/${baseId}/${buyId}`;
  const headers = {
    Authorization: `Bearer ${apiKey}`,
    "Content-Type": "application/json",
  };

  const data = {
    fields: {
      tgId: tgId,
      inv_id: invId,
      Sum: sum,
      Lessons: lessons,
      Tag: tag,
      Date: date,
      Nickname: nick,
    },
  };

  try {
    await axios.post(url, data, { headers });
  } catch (error) {
    console.error(
      "Error sending data to Airtable:",
      error.response ? error.response.data : error.message
    );
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Airtable 2
async function thirdTwoToAirtable(tgId, invId, sum, lessons, tag) {
  const apiKey = process.env.AIRTABLE_API_KEY;
  const baseId = process.env.AIRTABLE_BASE_ID;
  const buyId = process.env.AIRTABLE_BUY_ID;

  const url = `https://api.airtable.com/v0/${baseId}/${buyId}`;
  const headers = {
    Authorization: `Bearer ${apiKey}`,
    "Content-Type": "application/json",
  };

  const data = {
    fields: {
      tgId: tgId,
      inv_id: invId,
      Sum: sum,
      Lessons: lessons,
      Tag: tag,
    },
  };

  try {
    await axios.post(url, data, { headers });
  } catch (error) {
    console.error(
      "Error sending data to Airtable:",
      error.response ? error.response.data : error.message
    );
  }
}

// –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Express-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const app = express();
app.use(bodyParser.json()); // –ò—Å–ø–æ–ª—å–∑—É–µ–º JSON –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram –∏ –†–æ–±–æ–∫–∞—Å—Å—ã

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
bot.command("start", async (ctx) => {
  const user = ctx.from;
  const tgId = ctx.from.id;
  console.log(`ID: ${user.id}`);
  console.log(`–ò–º—è: ${user.first_name}`);
  console.log(`–§–∞–º–∏–ª–∏—è: ${user.last_name || "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"}`);
  console.log(`–ù–∏–∫: ${user.username || "–Ω–µ —É–∫–∞–∑–∞–Ω"}`);
  console.log(`–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.id}`);

  try {
    await ctx.reply("–ü—Ä–∏–≤–µ—Ç! –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", {
      reply_markup: new InlineKeyboard().add({
        text: "–û–Ω–ª–∞–π–Ω-–∫—É—Ä—Å ¬´–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è –¥–ª—è –¥–µ–≤—É—à–µ–∫¬ª",
        callback_data: "pullups_for_ladies",
      }),
    });
  } catch (error) {
    console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ`, error);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
bot.on("callback_query:data", async (ctx) => {
  const action = ctx.callbackQuery.data;
  const session = await Session.findOne({ userId: ctx.from.id.toString() });

  let city = "pullups_for_ladies";
  let studio = "pullups_for_ladies";

  const fullName = `${ctx.from.first_name} ${ctx.from.last_name || ""}`.trim();

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—É–¥–∏—é –≤ —Å–µ—Å—Å–∏–∏
  session.city = "pullups_for_ladies";
  session.studio = "pullups_for_ladies";
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏ –≤ —Å–µ—Å—Å–∏–∏
  const airtableId = await sendFirstAirtable(
    ctx.from.id,
    fullName,
    ctx.from.username
  );
  session.airtableId = airtableId; // –°–æ—Ö—Ä–∞–Ω—è–µ–º airtableId –≤ —Å–µ—Å—Å–∏–∏
  await session.save();

  // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ Airtable
  await updateAirtableRecord(session.airtableId, session.city, session.studio);

  if (action === "pullups_for_ladies") {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –º–µ–Ω—é
    await ctx.reply(
      "–ù–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ–º–æ–≥—É—Ç –≤–∞–º:\n‚ñ´Ô∏è–°—Ç–∞—Ç—å —Å–∏–ª—å–Ω–µ–µ\n‚ñ´Ô∏è–ü–æ–≤—ã—Å–∏—Ç—å —Ç–æ–Ω—É—Å\n‚ñ´Ô∏è–ù–∞—É—á–∏—Ç—å—Å—è –ø–æ–¥—Ç—è–≥–∏–≤–∞—Ç—å—Å—è\n‚ñ´Ô∏è–ù–∞–π—Ç–∏ –¥—Ä—É–∑–µ–π –∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤\n\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∏–∂–Ω–∏–º –º–µ–Ω—é, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É.",
      {
        reply_markup: new Keyboard()
          .text("üíÉüèª –ö—É–ø–∏—Ç—å –∫—É—Ä—Å –ø–æ —Å–ø–µ—Ü. —Ü–µ–Ω–µ")
          .row()
          .text("ü§∏üèº‚Äç‚ôÄÔ∏è –ö–∞–∫ –ø—Ä–æ—Ö–æ–¥—è—Ç –∑–∞–Ω—è—Ç–∏—è")
          .text("‚ùì FAQ")
          .resized(), // –¥–µ–ª–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π
      }
    );
  } else if (action === "edit_info") {
    console.log("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–§–ò, —Ç–µ–ª., email)");
    await ctx.reply("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å?", {
      reply_markup: new InlineKeyboard()
        .add({ text: "–§–ò", callback_data: "edit_name" })
        .add({ text: "–¢–µ–ª–µ—Ñ–æ–Ω", callback_data: "edit_phone" })
        .add({ text: "E-mail", callback_data: "edit_email" }),
    });
    session.step = "awaiting_edit";
    await session.save(); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–≥–∞
  } else if (action.startsWith("edit_")) {
    session.step = `awaiting_edit_${action.replace("edit_", "")}`;
    await ctx.reply(
      messages[
        `enter${
          action.replace("edit_", "").charAt(0).toUpperCase() +
          action.replace("edit_", "").slice(1)
        }`
      ]
    );
    await session.save(); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–≥–∞
  } else if (session.step === "awaiting_confirmation") {
    if (action === "confirm_payment") {
      console.log("–î–∞–Ω–Ω—ã–µ –ø–æ–¥–≤–µ—Ä–¥–∏–ª");

      try {
        await bot.api.sendMessage(
          -4510303967,
          `–ó–∞—è–≤–∫–∞ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ ${session.studio}\n–ò–º—è: ${
            session.name
          }\n–¢–µ–ª: ${session.phone}\nEmail: ${session.email}\n–ù–∏–∫: @${
            ctx.from?.username || "–Ω–µ —É–∫–∞–∑–∞–Ω"
          }\nID: ${ctx.from?.id}`
        );
      } catch (error) {
        console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ`, error);
      }

      if (
        session.studio === "pullups_for_ladies" ||
        session.studio === "handstand"
      ) {
        await ctx.reply(
          "–°–ø–∞—Å–∏–±–æ! –ö–∞–∫–æ–π –∫–∞—Ä—Ç–æ–π –≤–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–µ–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∫—É—Ä—Å?",
          {
            reply_markup: new InlineKeyboard()
              .add({ text: "–†–æ—Å—Å–∏–π—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π", callback_data: "russian_card" })
              .row()
              .add({
                text: "–ó–∞—Ä—É–±–µ–∂–Ω–æ–π –∫–∞—Ä—Ç–æ–π",
                callback_data: "foreign_card",
              }),
          }
        );
        session.step = "awaiting_card_type";
        await session.save(); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–≥–∞
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Airtable
      await sendToAirtable(
        session.name, // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session.email, // Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session.phone, // –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ctx.from.id, // Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session.city, // –ì–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session.studio // –°—Ç—É–¥–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      );
    }
  } else if (session.step === "awaiting_card_type") {
    if (action === "russian_card") {
      console.log("–í—ã–±—Ä–∞–ª–∏ —Ä–æ—Å—Å–∏—Å–∫—É—é –∫–∞—Ä—Ç—É, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–∞—Ä–∏—Ñ—ã");
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–∏–∏ –∏–∑ —Å–µ—Å—Å–∏–∏ –∏ telegram_id

      if (session.studio === "pullups_for_ladies") {
        console.log("–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–∞—Ä–∏—Ñ—ã");
        await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ –¥–ª—è –æ–ø–ª–∞—Ç—ã:", {
          reply_markup: new InlineKeyboard().add({
            text: "–°–ø–µ—Ü. —Ü–µ–Ω–∞ 6900‚ÇΩ / –º–µ—Å—è—Ü",
            callback_data: "buy_6900_ds_rub",
          }),
        });
        session.step = "online_buttons";
        await session.save(); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–≥–∞
      } else if (session.studio === "handstand") {
        console.log("–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–∞—Ä–∏—Ñ—ã");
        await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ –¥–ª—è –æ–ø–ª–∞—Ç—ã:", {
          reply_markup: new InlineKeyboard()
            .add({
              text: "–ö—É—Ä—Å —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º 5400‚ÇΩ",
              callback_data: "buy_5400_handstand_rub",
            })
            .row()
            .add({
              text: "–¢–æ–ª—å–∫–æ –≤–∏–¥–µ–æ-—É—Ä–æ–∫–∏ 2700‚ÇΩ",
              callback_data: "buy_2700_handstand_rub",
            }),
        });
        session.step = "online_buttons";
        await session.save(); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–≥–∞
      }
    } else if (action === "foreign_card") {
      console.log("–í—ã–±—Ä–∞–ª–∏ –∑–∞—Ä–±—É–∂–Ω—É—é –∫–∞—Ä—Ç—É, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–∞—Ä–∏—Ñ—ã");
      if (session.studio === "pullups_for_ladies") {
        console.log("–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–∞—Ä–∏—Ñ—ã");
        await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ –¥–ª—è –æ–ø–ª–∞—Ç—ã:", {
          reply_markup: new InlineKeyboard().add({
            text: "–°–ø–µ—Ü. —Ü–µ–Ω–∞ 69‚Ç¨ / –º–µ—Å—è—Ü",
            callback_data: "buy_69_ds_eur",
          }),
        });
        session.step = "online_buttons";
        await session.save(); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–≥–∞
      } else if (session.studio === "handstand") {
        console.log("–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–∞—Ä–∏—Ñ—ã");
        await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ –¥–ª—è –æ–ø–ª–∞—Ç—ã:", {
          reply_markup: new InlineKeyboard()
            .add({
              text: "–ö—É—Ä—Å —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º 59‚Ç¨",
              callback_data: "buy_59_handstand_eur",
            })
            .row()
            .add({
              text: "–¢–æ–ª—å–∫–æ –≤–∏–¥–µ–æ-—É—Ä–æ–∫–∏ 29‚Ç¨",
              callback_data: "buy_29_handstand_eur",
            }),
        });
        session.step = "online_buttons";
        await session.save(); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–≥–∞
      }
    }
  } else if (session.step === "online_buttons") {
    console.log("–≥–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Å —Ç–∞—Ä–∏—Ñ–æ–º");
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
    const actionInfo = actionData[ctx.callbackQuery.data];
    const { paymentLink, paymentId } = await generateSecondPaymentLink(
      action,
      session.email
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
    await ctx.reply(`–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: ${paymentLink}`);

    await thirdTwoToAirtable(
      ctx.from.id,
      paymentId,
      actionInfo.sum,
      actionInfo.lessons,
      actionInfo.tag
    );
  } else if (action.startsWith("day")) {
    const buttonText = action.split(",")[1];
    const date = buttonText.match(/\(([^)]+)\)/);
    const str = JSON.stringify(date[1]);
    const str2 = JSON.parse(str);
    console.log(`–í—ã–±—Ä–∞–ª –¥–∞—Ç—É –≥—Ä—É–ø–ø–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ - ${str2}`);

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ paymentId
    const { paymentLink, paymentId } = await generatePaymentLinkFirst(
      session.studio,
      session.email
    );
    console.log("–û—Ç–ø—Ä–∞–≤–ª—è—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã");
    await ctx.reply(
      `–û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏: ${buttonText}. –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ–ø–ª–∞—Ç–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∑–∞–ø–∏—Å–∏.`
    );
    await ctx.reply(`–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: ${paymentLink}`);
    session.step = "completed";
    await session.save();
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Airtable
    const sum = studioDetails[session.studio].price;
    const lessons = 1;
    const tag = studioDetails[session.studio].tag; // –ë–µ—Ä–µ–º —Ç–µ–≥ –∏–∑ —Å—Ç—É–¥–∏–∏
    await sendTwoToAirtable(
      ctx.from.id,
      paymentId,
      sum,
      lessons,
      tag,
      str2,
      ctx.from.username
    );
  } else if (action.startsWith("later")) {
    console.log("–í—ã–±—Ä–∞–ª –ø–æ–∑–∂–µ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É –≥—Ä—É–ø–ø–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏");
    await ctx.reply(
      `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—É—é –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º\n\n–ó–∞ –¥–≤–∞ –¥–Ω—è –¥–æ —ç—Ç–æ–π –¥–∞—Ç—ã —è –≤—ã—à–ª—é –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è.`
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç—ã
    session.step = "awaiting_later_date";
    await session.save();
  } else if (action.startsWith("a_da")) {
    console.log("  —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å –Ω–∞–º–∏");
    try {
      const tgId = ctx.from.id;
      const userInfo = await getUserInfo(tgId);
      const session = await Session.findOne({ userId: tgId.toString() });
      if (userInfo) {
        const { tag, currency } = userInfo;
        const keyboard = generateKeyboard(tag);
        if (keyboard) {
          await ctx.reply(
            "–†–∞–¥ —Å–ª—ã—à–∞—Ç—å! –ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
            {
              reply_markup: keyboard,
            }
          );
        } else {
          await ctx.reply(
            "–í–∞—à —Ç–µ–≥ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ."
          );
        }
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±–æ—Ä–µ —Ç–∞—Ä–∏—Ñ–∞ –≤ —Å–µ—Å—Å–∏–∏
        session.selectedTag = tag;
        session.currency = currency;
        await session.save(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
      }
    } catch (error) {
      console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", error);
    }
  } else if (action.startsWith("buy")) {
    console.log("–≥–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Å —Ç–∞—Ä–∏—Ñ–æ–º");

    const userInfo = await getUserInfo(ctx.from.id);
    // const { tag, email } = userInfo;
    const email = userInfo?.email || session?.email;
    const tag = userInfo?.tag || "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç";

    try {
      await bot.api.sendMessage(
        -4510303967,
        `–í—ã—Å—Ç–∞–≤–ª–µ–Ω —Å—á–µ—Ç - –ó–∞—è–≤–∫–∞ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ ${tag}\nEmail: ${email}\n–ù–∏–∫: @${
          ctx.from?.username || "–Ω–µ —É–∫–∞–∑–∞–Ω"
        }\nID: ${ctx.from?.id}`
      );
    } catch (error) {
      console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ`, error);
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
    const actionInfo = actionData[action];
    const { paymentLink, paymentId } = await generateSecondPaymentLink(
      action,
      email
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
    await ctx.reply(`–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: ${paymentLink}`);

    await thirdTwoToAirtable(
      ctx.from.id,
      paymentId,
      actionInfo.sum,
      actionInfo.lessons,
      actionInfo.tag
    );
  } else if (action.startsWith("a_net")) {
    console.log("–ù–ï–¢ - –Ω–µ –ø–ª–∞–Ω–∏—É—Ä–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å –Ω–∞–º–∏");
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–∏—á–∏–Ω–æ–π –æ—Ç–∫–∞–∑–∞
    await ctx.reply(
      "–û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –≤—ã —Ä–µ—à–∏–ª–∏ –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å –Ω–∞–º–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ—á–µ–º—É –≤—ã –ø—Ä–∏–Ω—è–ª–∏ —Ç–∞–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ. –ú–æ–∂–µ—Ç –±—ã—Ç—å, —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ù–∞–º –≤–∞–∂–Ω–æ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –ª—É—á—à–µ!"
    );

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥ –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    session.step = "awaiting_feedback";
    await session.save();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏–π –æ–±—ã—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
bot.on("message:text", async (ctx) => {
  let session = await Session.findOne({ userId: ctx.from.id.toString() });
  const userMessage = ctx.message.text;
  const tgId = ctx.from.id;

  // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
  if (!session) {
    console.log(`–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${tgId}. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é.`);
    session = new Session({
      userId: tgId,
      step: "start_—Ålient",
      userState: {},
    });
    await session.save();
  }

  if (session.userState?.awaitingDeposit === true) {
    const text = ctx.message.text.trim().toLowerCase();
    const sum = parseFloat(text);
    if (isNaN(sum) || sum <= 0) {
      await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.");
      return;
    }
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const userInfo = await getUserInfo(tgId);
    if (!userInfo) {
      await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.");
      return;
    }

    const paymentId = generateUniqueId();
    const paymentLink = generatePaymentLink(paymentId, sum, userInfo.email);
    await ctx.reply(`–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã: ${paymentLink}`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–µ–ø–æ–∑–∏—Ç–µ –≤ Airtable
    await sendTwoToAirtable(
      tgId,
      paymentId,
      sum,
      0,
      "deposit",
      "deposit",
      ctx.from.username
    );

    // // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // delete session.userState;
    // return;
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    session.userState = {}; // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await session.save();
  }
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç –æ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  if (session.step === "awaiting_personal_training_details") {
    const priceTag = session.priceTag; // –î–æ—Å—Ç–∞–µ–º priceTag –∏–∑ —Å–µ—Å—Å–∏–∏
    const city = session.city;
    const place = session.studio;

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –µ–≥–æ –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    await ctx.reply(
      "–°–ø–∞—Å–∏–±–æ! –Ø —Å–≤—è–∂—É—Å—å —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º –∏ –ø–æ–¥–±–µ—Ä—É –¥–ª—è –≤–∞—Å —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è. –ö–∞–∫ —Ç–æ–ª—å–∫–æ —Å–æ–≥–ª–∞—Å—É–µ–º –≤—Å–µ –¥–µ—Ç–∞–ª–∏, –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏. –û–∂–∏–¥–∞–π—Ç–µ, —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω—É—Å—å —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ üòä"
    );

    // // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–∞—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π —Å—Ç—É–¥–∏–∏
    // const recipients = RECIPIENTS_BY_STUDIO[session.studio] || []; // –ë–µ—Ä–µ–º —Å—Ç—É–¥–∏—é –∏–∑ —Å–µ—Å—Å–∏–∏
    // const username = ctx.from.username ? `@${ctx.from.username}` : "–ë–µ–∑ –Ω–∏–∫–∞"; // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ "–ë–µ–∑ –Ω–∏–∫–∞"

    // // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –∞–¥—Ä–µ—Å–∞—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è —ç—Ç–æ–π —Å—Ç—É–¥–∏–∏
    // try {
    //   await bot.api.sendMessage(
    //     -4510303967,
    //     `–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –æ—Ç ${username}\n–ì–æ—Ä–æ–¥: ${session.city} & –°—Ç—É–¥–∏—è: ${place}:\n${ctx.message.text}`
    //   );
    // } catch (error) {
    //   console.error(
    //     `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${recipientId}:`,
    //     error
    //   );
    //   // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    //   // - –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    //   // - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –ø—Ä–æ–±–ª–µ–º–µ
    // }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ priceTag
    const keyboard = generateKeyboard(priceTag);
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ –¥–ª—è –æ–ø–ª–∞—Ç—ã:", {
      reply_markup: keyboard,
    });

    session.step = "completed";
    await session.save();
  }

  if (session.step === "awaiting_feedback") {
    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –æ—Ç—á—ë—Ç
    const username = ctx.from.username ? `@${ctx.from.username}` : "–ë–µ–∑ –Ω–∏–∫–∞";

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª/—á–∞—Ç –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    try {
      await bot.api.sendMessage(
        -4510303967, // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID —á–∞—Ç–∞, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á–µ—Ç
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤:\n"${ctx.message.text}"`
      );
    } catch (error) {
      console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–∑—ã–≤–æ–º:", error);
    }

    // –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
    await ctx.reply(
      "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å! –í–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ."
    );

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    session.step = "completed";
    await session.save();
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å—Ç—É–¥–∏–π
  if (userMessage === "üíÉüèª –ö—É–ø–∏—Ç—å –∫—É—Ä—Å –ø–æ —Å–ø–µ—Ü. —Ü–µ–Ω–µ") {
    console.log("–ù–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É - üíÉüèª –ö—É–ø–∏—Ç—å –∫—É—Ä—Å –ø–æ —Å–ø–µ—Ü. —Ü–µ–Ω–µ");
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ–µ –º–µ–Ω—é
    await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è:", {
      reply_markup: {
        remove_keyboard: true, // –£–¥–∞–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ–µ –º–µ–Ω—é
      },
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç—Ç–∞–ø –≤ —Å–µ—Å—Å–∏–∏
    session.step = "awaiting_name";
    await session.save(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
  }

  // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '/', —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –∏ –º—ã –µ—ë –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
  else if (userMessage.startsWith("/")) {
    switch (userMessage) {
      case "/operator":
        console.log("–í—ã–∑–≤–∞–ª /operator");
        await ctx.reply(
          "–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –ù–∏–∫–∏—Ç–µ: @IDC_Manager, –æ–Ω –ø–æ–¥—Å–∫–∞–∂–µ—Ç üòâ"
        );
        break;
      default:
        await ctx.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
    return; // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –Ω–∏–∂–µ
  } else if (userMessage === "–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥—è—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏") {
    console.log("–ù–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É - –ö–∞–∫ –ø—Ä–æ—Ö–æ–¥—è—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏");
    await ctx.reply(
      "–£ –Ω–∞—Å –Ω–µ –æ–±—ã—á–Ω—ã–µ –≥—Ä—É–ø–ø–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –≥–¥–µ –≤—Å–µ —É—á–µ–Ω–∏–∫–∏ –¥–µ–ª–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è ‚Äî —É –Ω–∞—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥.\n\n–ù–∞ –ø–µ—Ä–≤–æ–º –∑–∞–Ω—è—Ç–∏–∏ —Ç—Ä–µ–Ω–µ—Ä –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –≤–∞—à —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏ –æ–±—Å—É–¥–∏—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–µ–ª–∏. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –±—É–¥—É—Ç –Ω–∞–ø–∏—Å–∞–Ω—ã —Å —É—á–µ—Ç–æ–º –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è –∏ —Ü–µ–ª–µ–π üî•\n\n–ú—ã —ç—Ç–æ –¥–µ–ª–∞–µ–º —Å –ø–æ–º–æ—â—å—é –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –≥–¥–µ —É –≤–∞—Å –±—É–¥–µ—Ç —Å–≤–æ–π –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, –∏—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã‚ùóÔ∏è\n\n–¢–∞–∫ –º—ã –¥–æ–±–∏–≤–∞–µ–º—Å—è –Ω–∞–∏–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –¥–ª—è –Ω–∞—à–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤ ü§ç"
    );
  } else if (userMessage === "ü§∏üèº‚Äç‚ôÄÔ∏è –ö–∞–∫ –ø—Ä–æ—Ö–æ–¥—è—Ç –∑–∞–Ω—è—Ç–∏—è") {
    console.log("–ù–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É - ü§∏üèº‚Äç‚ôÄÔ∏è –ö–∞–∫ –ø—Ä–æ—Ö–æ–¥—è—Ç –∑–∞–Ω—è—Ç–∏—è");
    await ctx.reply(
      "1Ô∏è‚É£ –¢–µ—Å—Ç-—Å–∏–ª—ã:\n–ù–∞ –ø–µ—Ä–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –≤—ã –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ –Ω–∞—à–µ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ —Å–Ω–∏–º–µ—Ç–µ –∏—Ö –Ω–∞ –≤–∏–¥–µ–æ. –¢—Ä–µ–Ω–µ—Ä –¥–∞—Å—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å: —Ä–∞—Å—Å–∫–∞–∂–µ—Ç, —á—Ç–æ –¥–µ–ª–∞–µ—Ç–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∏ –æ—Ç–º–µ—Ç–∏—Ç –≤–∞—à–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã üí™üèª\n\n2Ô∏è‚É£ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥:\n–í—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∞–¥–∞–ø—Ç–∏—Ä—É—é—Ç—Å—è –ø–æ–¥ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å. –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –∞ –∫–∞–∂–¥–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ—Ç—Å—è –¥–µ–º–æ-–≤–∏–¥–µ–æ –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º.\n\n3Ô∏è‚É£ –£–¥–æ–±—Å—Ç–≤–æ –∏ –≥–∏–±–∫–æ—Å—Ç—å:\n–¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ—Å—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è! –ú—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ–¥—Ö–æ–¥ –∫–∞–∂–¥–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –≤–∏–¥–µ–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.\n\n4Ô∏è‚É£ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç—Ä–µ–Ω–µ—Ä–∞:\n–í–∞—à–∏ –≤–∏–¥–µ–æ –≤—Å–µ–≥–¥–∞ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è —Ç—Ä–µ–Ω–µ—Ä–æ–º, –∫–æ—Ç–æ—Ä—ã–π –¥–∞—ë—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –ø–æ–º–æ–≥–∞–µ—Ç —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫—É –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ."
    );
  } else if (userMessage === "ü§∏üèº‚Äç‚ôÄÔ∏è –ü—Ä–æ –∫—É—Ä—Å") {
    console.log("–ù–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É - ü§∏üèº‚Äç‚ôÄÔ∏è –ü—Ä–æ –∫—É—Ä—Å");
    await ctx.reply(
      "–û–Ω–ª–∞–π–Ω-–∫—É—Ä—Å ¬´–°–Ω–æ–≥—à–∏–±–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–π–∫–∞ –Ω–∞ —Ä—É–∫–∞—Ö¬ª\n\n–ü–æ–≥—Ä—É–∑–∏—Ç–µ—Å—å –≤ –º–∏—Ä —Å—Ç–æ–π–∫–∏ –Ω–∞ —Ä—É–∫–∞—Ö ‚Äî —ç—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Å–∏–ª—ã –∏ —á—É–≤—Å—Ç–≤–∞ –±–∞–ª–∞–Ω—Å–∞, –Ω–æ –∏ –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤–∞—Å –≤—Å–µ–≥–¥–∞ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å.\n\n–ù–∞—à–∞ 21-–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ–±—Ä–∞–ª–∞ –≤—Å–µ –Ω–∞—à–∏ –∑–Ω–∞–Ω–∏—è –∏ –Ω–∞–∏–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–∞—É—á–∏—Ç—å –≤–∞—Å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤—É —Å—Ç–æ–π–∫–∏ –Ω–∞ —Ä—É–∫–∞—Ö.\n\n–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –∫—É—Ä—Å–∞ ‚Äî –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è –º–æ–∂–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –¥–æ–º–∞, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è."
    );
  } else if (userMessage === "–¶–µ–Ω—ã –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ") {
    console.log("–ù–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É - –¶–µ–Ω—ã –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ");
    const priceAndSchedule = getPriceAndSchedule(session.studio);
    await ctx.reply(priceAndSchedule);
  } else if (userMessage === "üí∞ –¶–µ–Ω—ã") {
    console.log("–ù–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É - üí∞ –¶–µ–Ω—ã");
    const priceAndSchedule = getPriceAndSchedule(session.studio);
    await ctx.reply(priceAndSchedule);
  } else if (userMessage === "‚¨ÖÔ∏è –ù–∞–∑–∞–¥") {
    console.log("–ù–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É - ‚¨ÖÔ∏è –ù–∞–∑–∞–¥");
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π –∫—É—Ä—Å –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", {
      reply_markup: new InlineKeyboard()
        .add({
          text: "–û–Ω–ª–∞–π–Ω-–∫—É—Ä—Å ¬´SuperCalisthenics¬ª",
          callback_data: "super_calisthenics",
        })
        .row()
        .add({
          text: "–û–Ω–∞–ª–π–Ω-–∫—É—Ä—Å ¬´–°—Ç–æ–π–∫–∞ –Ω–∞ —Ä—É–∫–∞—Ö¬ª",
          callback_data: "handstand",
        }),
    });
  } else if (userMessage === "–ù–∞–∑–∞–¥") {
    console.log("–ù–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É - –ù–∞–∑–∞–¥");
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ–µ –º–µ–Ω—é
    await ctx.reply("..", {
      reply_markup: { remove_keyboard: true },
    });
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—É–¥–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≥–æ—Ä–æ–¥–∞
    let studiosKeyboard;

    if (session.city === "–ú–æ—Å–∫–≤–∞") {
      studiosKeyboard = new InlineKeyboard()
        .add({ text: "–º. 1905–≥.", callback_data: "studio_ycg" })
        .row()
        .add({ text: "–ü–æ–º–µ–Ω—è—Ç—å –≥–æ—Ä–æ–¥", callback_data: "change_city" });
    } else if (session.city === "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥") {
      studiosKeyboard = new InlineKeyboard()
        .add({ text: "–º. –ü–µ—Ç—Ä–æ–≥—Ä–∞–¥–∫–∞—è", callback_data: "studio_rtc" })
        .row()
        .add({ text: "–º. –í—ã–±–æ—Ä–≥—Å–∫–∞—è", callback_data: "studio_hkc" })
        .row()
        .add({
          text: "–º. –ú–æ—Å–∫–æ–≤—Å–∫–∏–µ –í–æ—Ä–æ—Ç–∞",
          callback_data: "studio_spi",
        })
        .row()
        .add({ text: "–ü–æ–º–µ–Ω—è—Ç—å –≥–æ—Ä–æ–¥", callback_data: "change_city" });
    } else if (session.city === "–ï—Ä–µ–≤–∞–Ω") {
      studiosKeyboard = new InlineKeyboard()
        .add({ text: "—É–ª. –ë—É–∑–∞–Ω–¥–∞", callback_data: "studio_gof" })
        .row()
        .add({ text: "–ü–æ–º–µ–Ω—è—Ç—å –≥–æ—Ä–æ–¥", callback_data: "change_city" });
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç—É–¥–∏–∏
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–∏—é –∏–ª–∏ –ø–æ–º–µ–Ω—è–π—Ç–µ –≥–æ—Ä–æ–¥:", {
      reply_markup: studiosKeyboard,
    });
  } else if (userMessage === "FAQ") {
    console.log("–Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É FAQ");
    await ctx.reply(
      "–ü–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∞—à–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö. \n\n–ö–æ–º—É –ø–æ–¥—Ö–æ–¥—è—Ç —Ç–∞–∫–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è, —Å–∫–æ–ª—å–∫–æ –¥–ª—è—Ç—Å—è –∑–∞–Ω—è—Ç–∏—è, –∫–∞–∫ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏ –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã. \n\n–ï—Å–ª–∏ –≤—ã –Ω–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –ù–∏–∫–∏—Ç–µ @IDC_Manager. ‚ÜòÔ∏è",
      {
        reply_markup: new InlineKeyboard().url(
          "–ß–∏—Ç–∞—Ç—å FAQ",
          "https://telegra.ph/I-Do-Calisthenics-FAQ-02-06"
        ),
      }
    );
  } else if (userMessage === "‚ùì FAQ") {
    console.log("–Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É ‚ùì FAQ");
    await ctx.reply(
      "–ü–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∞—à–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö. \n\n–ö–æ–º—É –ø–æ–¥—Ö–æ–¥—è—Ç —Ç–∞–∫–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è, –Ω—É–∂–µ–Ω –ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å, –∫–∞–∫ —Å–Ω–∏–º–∞—Ç—å —Å–≤–æ–∏ –ø–æ–¥—Ö–æ–¥—ã –∏ –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã. ‚ÜòÔ∏è",
      {
        reply_markup: new InlineKeyboard().url(
          "–ß–∏—Ç–∞—Ç—å FAQ",
          "https://telegra.ph/I-Do-Calisthenics-Online-FAQ-11-24"
        ),
      }
    );
  } else if (session.step === "awaiting_later_date") {
    const userMessage = ctx.message.text;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (–¥–¥.–º–º)
    const dateRegex = /^(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[0-2])$/;
    if (dateRegex.test(userMessage)) {
      const [day, month] = userMessage.split(".");
      const year = new Date().getFullYear();
      const date = new Date(year, month - 1, day);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
      const currentDate = new Date();
      currentDate.setHours(0, 0, 0, 0); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –≤ –ø–æ–ª–Ω–æ—á—å

      if (date >= currentDate) {
        // –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
        const reminderDate = new Date(date);
        reminderDate.setDate(reminderDate.getDate() - 2);
        reminderDate.setHours(12, 30, 0, 0); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è

        const userTimezoneOffset = +3; // –ü—Ä–∏–º–µ—Ä: –¥–ª—è –ú–æ—Å–∫–≤—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ +3
        const reminderTimeUTC =
          reminderDate.getTime() - userTimezoneOffset * 60 * 60 * 1000;

        session.laterDate = userMessage;
        await session.save();

        const currentTime = Date.now();
        const reminderDelay = reminderTimeUTC - currentTime;

        await ctx.reply(
          `–í—ã –≤—ã–±—Ä–∞–ª–∏ ${userMessage}. –Ø —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –∑–∞ –¥–≤–∞ –¥–Ω—è –¥–æ —ç—Ç–æ–π –¥–∞—Ç—ã! \n\n–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –ù–∏–∫–∏—Ç–µ: @IDC_Manager`
        );

        if (reminderDelay > 0) {
          setTimeout(async () => {
            await ctx.reply(
              `–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –≤—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞ ${userMessage}. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–Ω—É—é –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è:`
            );

            const studio = session.studio;
            const telegramId = ctx.from.id;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤–µ–±—Ö—É–∫
            await sendToWebhook(studio, telegramId);

            session.step = "awaiting_next_step";
            await session.save();
          }, reminderDelay);
        }

        session.step = "completed";
        await session.save();
      } else {
        // –ï—Å–ª–∏ –¥–∞—Ç–∞ –ø—Ä–æ—à–µ–¥—à–∞—è, –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
        await ctx.reply(
          "–£–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤ –±—É–¥—É—â–µ–º."
        );
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "awaiting_later_date"
        session.step = "awaiting_later_date";
        await session.save();
      }
    } else {
      // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
      await ctx.reply(
        "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–¥.–º–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 04.12)."
      );
      // –û—Å—Ç–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "awaiting_later_date"
      session.step = "awaiting_later_date";
      await session.save();
    }
  } else if (session.step === "awaiting_name") {
    session.name = ctx.message.text;
    await ctx.reply(messages.enterPhone);
    session.step = "awaiting_phone";
    await session.save(); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–≥–∞
  } else if (session.step === "awaiting_phone") {
    const phone = ctx.message.text;
    if (/^\+\d+$/.test(phone)) {
      session.phone = phone;
      await ctx.reply(messages.enterEmail);
      session.step = "awaiting_email";
      await session.save(); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–≥–∞
    } else {
      await ctx.reply("–í—ã –Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª–∏ –Ω–æ–º–µ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑");
    }
  } else if (session.step === "awaiting_email") {
    session.email = ctx.message.text;
    const confirmationMessage =
      "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n–§–ò: {{ $–§–ò }},\n–¢–µ–ª–µ—Ñ–æ–Ω: {{ $Tel }},\nEmail: {{ $email }}\n\n–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ"
        .replace("{{ $–§–ò }}", session.name)
        .replace("{{ $Tel }}", session.phone)
        .replace("{{ $email }}", session.email);

    await ctx.reply(confirmationMessage, {
      reply_markup: new InlineKeyboard()
        .add({ text: "–í—Å–µ –≤–µ—Ä–Ω–æ", callback_data: "confirm_payment" })
        .row()
        .add({ text: "–ò–∑–º–µ–Ω–∏—Ç—å", callback_data: "edit_info" }),
    });

    session.step = "awaiting_confirmation";
    await session.save(); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–≥–∞
  } else if (session.step.startsWith("awaiting_edit_")) {
    const field = session.step.replace("awaiting_edit_", "");
    if (field === "name") {
      session.name = ctx.message.text;
    } else if (field === "phone") {
      const phone = ctx.message.text;
      if (/^\+\d+$/.test(phone)) {
        session.phone = phone;
      } else {
        await ctx.reply("–í—ã –Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª–∏ –Ω–æ–º–µ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑");
        return;
      }
    } else if (field === "email") {
      session.email = ctx.message.text;
    }

    const confirmationMessage =
      "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n–§–ò: {{ $–§–ò }},\n–¢–µ–ª–µ—Ñ–æ–Ω: {{ $Tel }},\nEmail: {{ $email }}\n\n–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ"
        .replace("{{ $–§–ò }}", session.name)
        .replace("{{ $Tel }}", session.phone)
        .replace("{{ $email }}", session.email);

    await ctx.reply(confirmationMessage, {
      reply_markup: new InlineKeyboard()
        .add({ text: "–í—Å–µ –≤–µ—Ä–Ω–æ", callback_data: "confirm_payment" })
        .row()
        .add({ text: "–ò–∑–º–µ–Ω–∏—Ç—å", callback_data: "edit_info" }),
    });

    session.step = "awaiting_confirmation";
    await session.save(); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–≥–∞
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ
async function handleExistingUserScenario(ctx) {
  try {
    const userInfo = await getUserInfo(ctx.from.id);
    if (userInfo) {
      const { tag } = userInfo;

      if (tag.includes("ds")) {
        console.log("–ø–æ–ª—É—á–∏–ª –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é (ds)");
        const keyboard = new Keyboard()
          .text("–£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å")
          .text("–ö—É–ø–∏—Ç—å –æ–Ω–ª–∞–π–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏");
        await ctx.reply("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", {
          reply_markup: { keyboard: keyboard.build(), resize_keyboard: true },
        });
      } else if (tag.includes("group")) {
        console.log("–ø–æ–ª—É—á–∏–ª –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é (group)");
        const keyboard = new Keyboard()
          .text("–£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å")
          .text("–ö—É–ø–∏—Ç—å –≥—Ä—É–ø–ø–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏");
        await ctx.reply("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", {
          reply_markup: { keyboard: keyboard.build(), resize_keyboard: true },
        });
      } else if (tag.includes("personal")) {
        console.log("–ø–æ–ª—É—á–∏–ª –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é (personal)");
        const keyboard = new Keyboard()
          .text("–£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å")
          .text("–ö—É–ø–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏");
        await ctx.reply("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", {
          reply_markup: { keyboard: keyboard.build(), resize_keyboard: true },
        });
      }
    }
  } catch (error) {
    console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", error);
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.start();
